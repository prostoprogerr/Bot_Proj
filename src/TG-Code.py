import telebot
import os
import io
import sys
import torch
import shutil
import tempfile
import requests
import crop
import language_tool_python
from PIL import Image
from transformers import TrOCRProcessor, VisionEncoderDecoderModel


cwd = os.getcwd()
root_dir = os.path.dirname(cwd)
parent_root_dir = os.path.dirname(root_dir)
yolo_dir = os.path.join(parent_root_dir, "yolo_v5", "yolov5")
yolo_weights = os.path.join(root_dir, "models", "yolov5", "best.pt")
model_dir = os.path.join(root_dir, "models", "trocr", "v3", "trocr_model")
processor_dir = os.path.join(root_dir, "models", "trocr", "v3", "trocr_processor")

sys.path.append(yolo_dir)

from detect import run

bot = telebot.TeleBot('7654203891:AAFEb7yBUe5YqoP4ADJnl8Ipa7GzJlJjvt4')
device = "cuda" if torch.cuda.is_available() else "cpu"
processor = TrOCRProcessor.from_pretrained(processor_dir)
model = VisionEncoderDecoderModel.from_pretrained(model_dir).to(device)

def clear_directory(path):
    if os.path.exists(path):
        shutil.rmtree(path)
    os.makedirs(path)


def clear(image_dir, bbox_dir, cropped_dir):
    clear_directory(image_dir)
    clear_directory(bbox_dir)
    clear_directory(cropped_dir)


def convert_to_jpeg(image_pil, output_path):
    image_pil.convert("RGB").save(output_path, format="JPEG")
    return output_path


def check_spelling(text):
    try:
        response = requests.get(
            "https://speller.yandex.net/services/spellservice.json/checkText",
            params={"text": text, "lang": "ru"}
        )
        results = response.json()
        yandex_corrected = text
        yandex_log = ""

        for item in reversed(results):
            if item["s"]:
                suggestion = item["s"][0]
                start = item["pos"]
                end = start + item["len"]
                yandex_corrected = yandex_corrected[:start] + suggestion + yandex_corrected[end:]
                yandex_log += f"‚Ä¢ <code>{item['word']}</code> ‚Üí <b>{suggestion}</b>\n"

    except Exception as e:
        print(f"[ERROR] Yandex Speller error: {e}")
        yandex_corrected = text
        yandex_log = "‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.</i>\n"

    try:
        tool = language_tool_python.LanguageTool('ru-RU')
        matches = tool.check(yandex_corrected)
        final_text = language_tool_python.utils.correct(yandex_corrected, matches)

        lt_log = ""
        for match in matches:
            context = match.context.replace('\n', ' ')
            lt_log += f"‚Ä¢ <b>{match.message}</b>\n  ‚§∑ <code>{context.strip()}</code>\n"

        tool.close()
    except Exception as e:
        print(f"[ERROR] LanguageTool error: {e}")
        final_text = yandex_corrected
        lt_log = "‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É —á–µ—Ä–µ–∑ LanguageTool.</i>"

    full_log = ""
    if yandex_log.strip():
        full_log += "<b>üßπ –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è:</b>\n" + yandex_log + "\n"
    if lt_log.strip():
        full_log += "<b>üîç –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ —Å—Ç–∏–ª—å:</b>\n" + lt_log

    return final_text.strip(), full_log.strip()


def process_image_pipeline(image_pil):
    with tempfile.TemporaryDirectory() as base_dir:
        image_dir = os.path.join(base_dir, "input_images")
        bbox_dir = os.path.join(base_dir, "bbox")
        cropped_dir = os.path.join(base_dir, "crops")

        for path in [image_dir, bbox_dir, cropped_dir]:
            os.makedirs(path, exist_ok=True)

        image_path = os.path.join(image_dir, "input.jpg")
        convert_to_jpeg(image_pil, image_path)

        image = Image.open(image_path).convert("RGB")
        width, height = image.size

        run(
            weights=yolo_weights,
            source=image_path,
            conf_thres=0.7,
            save_txt=True,
            save_crop=False,
            project=bbox_dir,
            name='',
            exist_ok=True
        )

        label_path = os.path.join(bbox_dir, "labels", "input.txt")
        if not os.path.exists(label_path):
            print(f"[ERROR] –§–∞–π–ª –º–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {label_path}")
            return "", "", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç: YOLO –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."

        normalized_coords = crop.read_coords(label_path)
        pixel_coords = crop.convert_to_pixel_coords(normalized_coords, width, height)
        sorted_coords = crop.sort_coords(pixel_coords)
        crop.crop_and_save_images(image_path, sorted_coords, cropped_dir)

        recognized_text = ""
        for i in range(len(sorted_coords)):
            cropped_path = os.path.join(cropped_dir, f"cropped_image{i + 1}.jpg")
            try:
                img = Image.open(cropped_path).convert("RGB")
                pixel_values = processor(images=img, return_tensors="pt").pixel_values.to(device)
                generated_ids = model.generate(pixel_values)
                text = processor.batch_decode(generated_ids, skip_special_tokens=True)[0]
                recognized_text += text + " "
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {cropped_path}: {e}")

        corrected_text, errors = check_spelling(recognized_text.strip())

        return recognized_text.strip(), corrected_text.strip(), errors


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "/start":
        bot.send_message(message.chat.id,
                         "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å *—Ä—É—Å—Å–∫–∏–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç* —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
                         "üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, —è –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç, —Ä–∞—Å–ø–æ–∑–Ω–∞—é –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—é –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é!\n\n"
                         "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏ /help.")
    elif message.text == "/help":
        bot.send_message(message.chat.id,
                         "üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
                         "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                         "1Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞—é *—Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç* —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                         "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é *–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É*\n"
                         "3Ô∏è‚É£ –î–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n\n"
                         "üìå *–°–æ–≤–µ—Ç—ã:*\n"
                         "‚Äî –î–µ–ª–∞–π —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ\n"
                         "‚Äî –õ—É—á—à–µ –∑–∞–≥—Ä—É–∂–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–¥–æ–∫—É–º–µ–Ω—Ç (–±–µ–∑ —Å–∂–∞—Ç–∏—è)\n"
                         "üì• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç–∞—Ç—å!")
    else:
        bot.send_message(message.chat.id,
                         "ü§î –ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è...\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        bot.send_message(message.chat.id, "üì• –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–¥–æ–∫—É–º–µ–Ω—Ç. \nüß† –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")

        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded = bot.download_file(file_info.file_path)
        image = Image.open(io.BytesIO(downloaded)).convert("RGB")

        raw_text, corrected_text, errors = process_image_pipeline(image)

        bot.send_message(message.chat.id, f"üìù *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n`{raw_text}", parse_mode="Markdown")
        bot.send_message(message.chat.id, f"‚úÖ *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n`{corrected_text}", parse_mode="Markdown")

        if errors:
            bot.send_message(message.chat.id, f"üîç *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:*\n{errors}", parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, "üéâ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        print(f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(content_types=['document'])
def handle_image_document(message):
    try:
        file_name = message.document.file_name.lower()
        image_extensions = (".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".webp")

        if not file_name.endswith(image_extensions):
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG –∏ —Ç.–¥.), –∞ –Ω–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
            return

        bot.send_message(message.chat.id, "üì• –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–¥–æ–∫—É–º–µ–Ω—Ç. \nüß† –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")

        file_info = bot.get_file(message.document.file_id)
        downloaded = bot.download_file(file_info.file_path)
        image = Image.open(io.BytesIO(downloaded)).convert("RGB")

        raw_text, corrected_text, errors = process_image_pipeline(image)

        bot.send_message(message.chat.id, f"üìù *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n{raw_text}", parse_mode="Markdown")
        bot.send_message(message.chat.id, f"‚úÖ *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n{corrected_text}", parse_mode="Markdown")

        if errors:
            bot.send_message(message.chat.id, f"üîç *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:*\n{errors}", parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, "üéâ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º-–¥–æ–∫—É–º–µ–Ω—Ç–æ–º: {e}")


print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
bot.polling(none_stop=True)