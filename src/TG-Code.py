import telebot
import os
import io
import sys
import torch
import shutil
import tempfile
import crop  
from PIL import Image
from transformers import TrOCRProcessor, VisionEncoderDecoderModel
import language_tool_python
 

cwd = os.getcwd()
root_dir = os.path.dirname(cwd)
parent_root_dir = os.path.dirname(root_dir)
yolo_dir = os.path.join(parent_root_dir, "yolo_v5", "yolov5")
YOLO_WEIGHTS = os.path.join(root_dir, "models", "yolov5", "best.pt")
TROCR_MODEL_DIR = os.path.join(root_dir, "models", "trocr", "v3", "trocr_model")
TROCR_PROCESSOR_DIR = os.path.join(root_dir, "models", "trocr", "v3", "trocr_processor")

sys.path.append(yolo_dir)

from detect import run 

bot = telebot.TeleBot('7654203891:AAFEb7yBUe5YqoP4ADJnl8Ipa7GzJlJjvt4') 
processor = TrOCRProcessor.from_pretrained(TROCR_PROCESSOR_DIR)
model = VisionEncoderDecoderModel.from_pretrained(TROCR_MODEL_DIR).to("cuda" if torch.cuda.is_available() else "cpu")

def clear_directory(path):
    if os.path.exists(path):
        shutil.rmtree(path)
    os.makedirs(path)

def convert_to_jpeg(image_pil, output_path):
    image_pil.convert("RGB").save(output_path, format="JPEG")
    return output_path

def check_spelling(text):
    tool = language_tool_python.LanguageTool('ru-RU')
    matches = tool.check(text)
    corrected_text = language_tool_python.utils.correct(text, matches)

    error_log = ""
    for match in matches:
        error_log += f"‚Ä¢ {match.message}\n  ‚§∑ {match.context.strip()}\n"

    tool.close()
    return corrected_text, error_log

def process_image_pipeline(image_pil):
    with tempfile.TemporaryDirectory() as temp_dir:
        original_path = os.path.join(temp_dir, "input.jpg")
        bbox_dir = os.path.join(temp_dir, "bbox", "labels", "input.txt")
        cropped_dir = os.path.join(temp_dir, "crops")
        project_dir = os.path.join(temp_dir, "bbox")

        convert_to_jpeg(image_pil, original_path)

        run(
            weights=YOLO_WEIGHTS,
            source=original_path,
            conf_thres=0.25,
            save_txt=True,
            save_crop=False,
            project=project_dir,
            name='',
            exist_ok=False
        )

        jpg_for_size = Image.open(original_path).convert("RGB")
        width, height = jpg_for_size.size
        label_path = os.path.join(project_dir, "labels", "input.txt")
        coords = crop.read_coords(label_path)
        pixel_coords = crop.convert_to_pixel_coords(coords, width, height)
        sorted_coords = crop.sort_coords(pixel_coords)

        os.makedirs(cropped_dir, exist_ok=True)
        crop.crop_and_save_images(original_path, sorted_coords, cropped_dir)

        recognized_text = ""
        for i in range(len(sorted_coords)):
            path = os.path.join(cropped_dir, f"cropped_image{i+1}.jpg")
            try:
                img = Image.open(path).convert("RGB")
                pixel_values = processor(images=img, return_tensors="pt").pixel_values.to(model.device)
                generated_ids = model.generate(pixel_values)
                text = processor.batch_decode(generated_ids, skip_special_tokens=True)[0]
                recognized_text += text + " "
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {path}: {e}")

        corrected, errors = check_spelling(recognized_text.strip())
        return recognized_text.strip(), corrected.strip(), errors


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "/start":
        bot.send_message(message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å *—Ä—É—Å—Å–∫–∏–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç* —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
            "üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç, —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–≥–æ –∏ –¥–∞–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é!\n\n"
            "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏ /help.")
    elif message.text == "/help":
        bot.send_message(message.chat.id,
            "üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "1Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞—é *—Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç* —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é *–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É*\n"
            "3Ô∏è‚É£ –î–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n\n"
            "üìå *–°–æ–≤–µ—Ç—ã:*\n"
            "‚Äî –î–µ–ª–∞–π —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ\n"
            "‚Äî –õ—É—á—à–µ, –µ—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫\n"
            "üì• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç–∞—Ç—å!")
    else:
        bot.send_message(message.chat.id,
            "ü§î –ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è...\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        bot.send_message(message.chat.id, "üì§ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ó–∞–≥—Ä—É–∂–∞—é...")

        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded = bot.download_file(file_info.file_path)
        image = Image.open(io.BytesIO(downloaded)).convert("RGB")

        bot.send_message(message.chat.id, "üß† –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        raw_text, corrected_text, errors = process_image_pipeline(image)

        bot.send_message(message.chat.id, f"üìù *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n`{raw_text}`", parse_mode="Markdown")
        bot.send_message(message.chat.id, f"‚úÖ *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n`{corrected_text}`", parse_mode="Markdown")

        if errors:
            bot.send_message(message.chat.id, f"üîç *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:*\n{errors}")
        else:
            bot.send_message(message.chat.id, "üéâ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        print(f"–û—à–∏–±–∫–∞: {e}")


print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
bot.polling(none_stop=True)

