import io
import logging
import threading
import requests
import time
import os
import telebot
from dotenv import load_dotenv
from PIL import Image
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

user_data = {}

load_dotenv()

bot = telebot.TeleBot(os.getenv('bot'))

def send_image_to_pipeline(image: Image.Image):
    with io.BytesIO() as output:
        image.save(output, format="JPEG")
        output.seek(0)
        files = {"file": ("image.jpg", output, "image/jpeg")}
        try:
            response = requests.post("http://localhost:8000/process/", files=files)
            response.raise_for_status()
            data = response.json()
            return data["recognized_text"], data["corrected_text"], data["errors"]
        except requests.RequestException as e:
            logging.error(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É: {e}")
            raise

def show_typing(bot, chat_id, stop_event):
    while not stop_event.is_set():
        bot.send_chat_action(chat_id, action='typing')
        time.sleep(1.5)

def start_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    start_button = KeyboardButton("–°—Ç–∞—Ä—Ç")
    help_button = KeyboardButton("–ü–æ–º–æ—â—å")
    markup.add(start_button, help_button)
    return markup

def text_action_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    get_text = KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
    get_corrected_text = KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
    get_all = KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É")
    markup.add(get_text)
    markup.add(get_corrected_text)
    markup.add(get_all)
    return markup

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text.lower() == "—Å—Ç–∞—Ä—Ç":
        bot.send_message(message.chat.id,
                         "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å *—Ä—É—Å—Å–∫–∏–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç* —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
                         "üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, —è –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç, —Ä–∞—Å–ø–æ–∑–Ω–∞—é –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—é –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é, –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ —Å—Ç–∏–ª—å.\n\n"
                         "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏ *–ü–æ–º–æ—â—å*.",
                         reply_markup=start_keyboard(),
                         parse_mode="Markdown")

    elif message.text.lower() == "–ø–æ–º–æ—â—å":
        bot.send_message(message.chat.id,
                         "üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
                         "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                         "1Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞—é *—Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç* —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                         "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é *–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é, –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è*\n"
                         "3Ô∏è‚É£ –î–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n\n"
                         "üìå –°–æ–≤–µ—Ç—ã:\n"
                         "‚Äî –î–µ–ª–∞–π —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ\n"
                         "‚Äî –õ—É—á—à–µ –∑–∞–≥—Ä—É–∂–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–¥–æ–∫—É–º–µ–Ω—Ç (–±–µ–∑ —Å–∂–∞—Ç–∏—è)\n"
                         "üì• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç–∞—Ç—å!",
                         reply_markup=start_keyboard(),
                         parse_mode="Markdown")

    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç":
        data = user_data.get(message.chat.id)
        if data:
            bot.send_message(message.chat.id,
                             f"üìù *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n```\n{data['raw_text']}\n```",
                             parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç":
        data = user_data.get(message.chat.id)
        if data:
            bot.send_message(message.chat.id,
                             f"‚úÖ *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n```\n{data['corrected_text']}\n```",
                             parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É":
        data = user_data.get(message.chat.id)
        if data:
            bot.send_message(message.chat.id,
                             f"üìù *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n```\n{data['raw_text']}\n```",
                             parse_mode="Markdown")
            bot.send_message(message.chat.id,
                             f"‚úÖ *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n```\n{data['corrected_text']}\n```",
                             parse_mode="Markdown")
            if data["errors"]:
                bot.send_message(message.chat.id,
                                 f"üîç *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:*\n{data['errors']}",
                                 parse_mode="HTML")
            else:
                bot.send_message(message.chat.id,
                                 "üéâ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    else:
        bot.send_message(message.chat.id,
                         "ü§î –ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è...\n–ù–∞–∂–º–∏ *–ü–æ–º–æ—â—å*, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.",
                         reply_markup=start_keyboard(),
                         parse_mode="Markdown")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    stop_typing = threading.Event()
    typing_thread = threading.Thread(target=show_typing, args=(bot, message.chat.id, stop_typing))
    typing_thread.start()

    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded = bot.download_file(file_info.file_path)
        image = Image.open(io.BytesIO(downloaded)).convert("RGB")

        raw_text, corrected_text, errors = send_image_to_pipeline(image)

        user_data[message.chat.id] = {
            "raw_text": raw_text,
            "corrected_text": corrected_text,
            "errors": errors
        }

        stop_typing.set()
        typing_thread.join()

        bot.send_message(message.chat.id,
                         "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                         reply_markup=text_action_keyboard(),
                         parse_mode="Markdown")

    except Exception as e:
        stop_typing.set()
        typing_thread.join()
        bot.send_message(message.chat.id,
                         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(content_types=['document'])
def handle_image_document(message):
    stop_typing = threading.Event()
    typing_thread = threading.Thread(target=show_typing, args=(bot, message.chat.id, stop_typing))
    typing_thread.start()

    try:
        file_name = message.document.file_name.lower()
        if not file_name.endswith((".jpg", ".jpeg", ".png")):
            stop_typing.set()
            typing_thread.join()
            bot.send_message(message.chat.id,
                             "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG).")
            return

        file_info = bot.get_file(message.document.file_id)
        downloaded = bot.download_file(file_info.file_path)
        image = Image.open(io.BytesIO(downloaded)).convert("RGB")

        raw_text, corrected_text, errors = send_image_to_pipeline(image)

        user_data[message.chat.id] = {
            "raw_text": raw_text,
            "corrected_text": corrected_text,
            "errors": errors
        }

        stop_typing.set()
        typing_thread.join()

        bot.send_message(message.chat.id,
                         "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                         reply_markup=text_action_keyboard(),
                         parse_mode="Markdown")

    except Exception as e:
        stop_typing.set()
        typing_thread.join()
        bot.send_message(message.chat.id,
                         "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        logging.error(f"[ERROR] –û—à–∏–±–∫–∞: {e}")


logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
bot.polling(none_stop=True)

